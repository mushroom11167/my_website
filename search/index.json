[{"content":" Now, let\u0026rsquo;s learn how to install Chrome on Ubuntu.\nFirst, we have to download debian package on Google Chrome, please click Download Chrome. Click that 64 位元 .deb to get the debian pckage. Open terminal to enter command to complete installation!\n1 $ sudo apt install /home/mushroom/下載/google-chrome-stable_current_amd64.deb ","date":"2024-10-12T00:00:00Z","image":"https://mushroom11167.github.io/my_website/p/linux-02/1_hu9697127394990337729.gif","permalink":"https://mushroom11167.github.io/my_website/p/linux-02/","title":"How to Install Chrome on Ubuntu"},{"content":"空氣汙染 資料來源自環境部環境資料開放平臺，先至網站註冊會員得到API，再點選開發指南至資料擷取API線上說明文件\nPackage 先安裝我們要使用的套件，分別為requests、pandas、datetime及time：\nrequest：抓取網路資料，對網站發出請求 pandas：處理資料及csv文件 datetime：處理日期 time：每次請求間格的時間 1 2 3 4 import requests import pandas as pd from datetime import datetime import time 爬蟲 crawl_and_append_csv 這步是要從我們指定的網站去下載csv檔，併進空的資料集裡\ncombined_df 存放每次下載資料的資料集 pd.read_csv 讀取csv檔的資料 pd.concat 將每次下載的資料合併 date_range 這步是抓取時間內的資料，由於每次下載上限是1000筆，所以是分批下載，最後將所有檔案合併成一個CSV檔\nstart_date、end_date：爬取資料的開始和結束日期 api_key：API金鑰 limit：每次爬取資料的筆數（最大1000筆） output_path：輸出的路徑 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def crawl_and_append_csv(url, combined_df): res = requests.get(url) data_csv = pd.read_csv(url) combined_df = pd.concat([combined_df, data_csv], ignore_index=True) return combined_df, len(data_csv) def date_range(start_date, end_date, url_template, api_key, limit, output_path): start_date_str = datetime.strptime(start_date, \u0026#34;%Y-%m-%d\u0026#34;).strftime(\u0026#34;%Y-%m-%d\u0026#34;) end_date_str = datetime.strptime(end_date, \u0026#34;%Y-%m-%d\u0026#34;).strftime(\u0026#34;%Y-%m-%d\u0026#34;) combined_df = pd.DataFrame() offset = 0 while True: url = url_template.format(start_date_str, end_date_str, api_key, offset, limit) combined_df, current_batch_size = crawl_and_append_csv(url, combined_df) # 檢查抓取的資料數量，如果少於 limit，則說明已經抓完，跳出循環 if current_batch_size \u0026lt; limit: break # 更新 offset offset += limit time.sleep(1) # 將合併後的資料寫入 CSV 檔案 combined_df.to_csv(output_path, index=False, encoding=\u0026#39;utf-8\u0026#39;) # 定義起始和結束日期 start_date = input(\u0026#34;請輸入開始日期（格式：YYYY-MM-DD）：\u0026#34;) end_date = input(\u0026#34;請輸入結束日期（格式：YYYY-MM-DD）：\u0026#34;) # api 金鑰 api_key = \u0026#34;輸入自己的API\u0026#34; # limit 是每次下載的筆數，一次最多只能下載 1000 筆 limit = 1000 # 存放路徑與檔名 output_path = \u0026#34;/home/mushroom/Jia/python/air-pollution/Air-202209.csv\u0026#34; url_template = \u0026#34;https://data.moenv.gov.tw/api/v2/aqx_p_488?\u0026amp;format=csv\u0026amp;filters=datacreationdate,GR,{0}|datacreationdate,LE,{1}\u0026amp;api_key={2}\u0026amp;offset={3}\u0026amp;limit={4}\u0026#34; date_range(start_date, end_date, url_template, api_key, limit, output_path) 輸入日期：\n結果：\n","date":"2024-10-08T00:00:00Z","permalink":"https://mushroom11167.github.io/my_website/p/python-01/","title":"Air quality index (AQI)(historical data)"},{"content":"Open 1 $ cd filename Leave 1 $ cd ../ Delete 1 $ sudo rm -rf filename Add file 1 $ mkdir filename Add document 1 2 3 $ \u0026gt; index.md $ \u0026gt; index.docx $ \u0026gt; index.txt ","date":"2024-10-07T00:00:00Z","permalink":"https://mushroom11167.github.io/my_website/p/linux-01/","title":"Basics"},{"content":" 1 2 3 4 5 6 7 8 9 \u0026lt;center\u0026gt; \u0026lt;img src= \u0026#34;https://i.pinimg.com/564x/fa/9a/46/fa9a463078a73b366a98f7fa65c34058.jpg\u0026#34; width= \u0026#34;50%\u0026#34;\u0026gt; \u0026lt;br\u0026gt; \u0026lt;img src= \u0026#34;https://i.pinimg.com/736x/76/c2/ec/76c2ecb925e8fb3829f8f10cc3f826b1.jpg\u0026#34; width= \u0026#34;50%\u0026#34;\u0026gt; \u0026lt;br\u0026gt; \u0026lt;img src= \u0026#34;https://i.pinimg.com/736x/1b/22/e9/1b22e9fcd3d4ca39aa89f64382b58a35.jpg\u0026#34; width= \u0026#34;50%\u0026#34;\u0026gt; \u0026lt;/center\u0026gt; Photo by Jia-Yi on Pinterest\n","date":"2024-10-07T00:00:00Z","image":"https://mushroom11167.github.io/my_website/p/film-01/1_hu17540385871287292383.gif","permalink":"https://mushroom11167.github.io/my_website/p/film-01/","title":"Film 01"},{"content":"Photo by Jia-Yi\n","date":"2024-10-07T00:00:00Z","image":"https://mushroom11167.github.io/my_website/p/hello-world/hello_hu12537369134082718547.jpeg","permalink":"https://mushroom11167.github.io/my_website/p/hello-world/","title":"Hello World"},{"content":"1 List each country name where the population is larger than that of \u0026lsquo;Russia\u0026rsquo;.\n1 world(name, continent, area, population, gdp) 1 2 3 4 SELECT name FROM world WHERE population \u0026gt; (SELECT population FROM world WHERE name=\u0026#39;Russia\u0026#39;) 2 Show the countries in Europe with a per capita GDP greater than \u0026lsquo;United Kingdom\u0026rsquo;.Show the countries in Europe with a per capita GDP greater than \u0026lsquo;United Kingdom\u0026rsquo;. Per Capita GDP The per capita GDP is the gdp/population\n1 2 3 4 SELECT name FROM world WHERE continent = \u0026#39;Europe\u0026#39; AND gdp/population \u0026gt; (SELECT gdp/population FROM world WHERE name = \u0026#39;United Kingdom\u0026#39;) 3 List the name and continent of countries in the continents containing either Argentina or Australia. Order by name of the country.\n1 2 3 SELECT name, continent FROM world WHERE (continent = \u0026#39;South America\u0026#39; OR continent = \u0026#39;Oceania\u0026#39;) ORDER BY name ASC 4 Which country has a population that is more than United Kingdom but less than Germany? Show the name and the population.\n1 2 3 4 SELECT name, population FROM world WHERE population \u0026gt; (SELECT population FROM world WHERE name = \u0026#39;United Kingdom\u0026#39;) AND population \u0026lt; (SELECT population FROM world WHERE name = \u0026#39;Germany\u0026#39;) Practice from SQLZOO\n","date":"2024-09-11T00:00:00Z","permalink":"https://mushroom11167.github.io/my_website/p/sql-04/","title":"SELECT within SELECT Tutorial"},{"content":"1 The example uses a WHERE clause to show the population of \u0026lsquo;France\u0026rsquo;. Note that strings should be in \u0026lsquo;single quotes\u0026rsquo;;\nModify it to show the population of Germany\n1 2 SELECT population FROM world WHERE name = \u0026#39;Germany\u0026#39; 2 Checking a list The word IN allows us to check if an item is in a list. The example shows the name and population for the countries \u0026lsquo;Brazil\u0026rsquo;, \u0026lsquo;Russia\u0026rsquo;, \u0026lsquo;India\u0026rsquo; and \u0026lsquo;China\u0026rsquo;.\nShow the name and the population for \u0026lsquo;Sweden\u0026rsquo;, \u0026lsquo;Norway\u0026rsquo; and \u0026lsquo;Denmark\u0026rsquo;.\n1 2 SELECT name, population FROM world WHERE name IN (\u0026#39;Sweden\u0026#39;, \u0026#39;Norway\u0026#39;, \u0026#39;Denmark\u0026#39;) 3 Which countries are not too small and not too big? BETWEEN allows range checking (range specified is inclusive of boundary values). The example below shows countries with an area of 250,000-300,000 sq. km. Modify it to show the country and the area for countries with an area between 200,000 and 250,000.\n1 2 SELECT name, area FROM world WHERE area BETWEEN 200000 AND 250000 Practice from SQLZOO\n","date":"2024-09-05T00:00:00Z","permalink":"https://mushroom11167.github.io/my_website/p/sql-01/","title":"SELECT basics"},{"content":"1 Change the query shown so that it displays Nobel prizes for 1950.\n1 2 3 SELECT yr, subject, winner FROM nobel WHERE yr = 1950 2 Show who won the 1962 prize for literature.\n1 2 3 4 SELECT winner FROM nobel WHERE yr = 1962 AND subject = \u0026#39;literature\u0026#39; 3 Show the year and subject that won \u0026lsquo;Albert Einstein\u0026rsquo; his prize.\n1 2 3 SELECT yr, subject FROM nobel where winner = \u0026#39;Albert Einstein\u0026#39; 4 Give the name of the \u0026lsquo;peace\u0026rsquo; winners since the year 2000, including 2000.\n1 2 3 SELECT winner FROM nobel WHERE yr \u0026gt;= \u0026#39;2000\u0026#39; AND subject = \u0026#39;peace\u0026#39; 5 Show all details (yr, subject, winner) of the literature prize winners for 1980 to 1989 inclusive.\n1 2 3 4 SELECT yr, subject, winner FROM nobel where (yr \u0026gt;=1980 AND yr \u0026lt;= 1989) AND subject = \u0026#39;literature\u0026#39; 6 Show all details of the presidential winners:\nTheodore Roosevelt Woodrow Wilson Jimmy Carter Barack Obama 1 2 3 4 5 SELECT * FROM nobel WHERE winner IN (\u0026#39;Theodore Roosevelt\u0026#39;, \u0026#39;Woodrow Wilson\u0026#39;, \u0026#39;Jimmy Carter\u0026#39;, \u0026#39;Barack Obama\u0026#39;) 7 Show the winners with first name John\n1 2 3 SELECT winner FROM nobel where winner LIKE \u0026#39;John%\u0026#39; 8 Show the year, subject, and name of physics winners for 1980 together with the chemistry winners for 1984.\n1 2 3 4 SELECT yr, subject, winner FROM nobel WHERE (yr = \u0026#39;1980\u0026#39; AND subject = \u0026#39;physics\u0026#39;) OR (yr = \u0026#39;1984\u0026#39; AND subject = \u0026#39;chemistry\u0026#39;) 9 Show the year, subject, and name of winners for 1980 excluding chemistry and medicine\n1 2 3 4 SELECT yr, subject, winner FROM nobel WHERE yr = \u0026#39;1980\u0026#39; AND subject NOT IN (\u0026#39;chemistry\u0026#39;, \u0026#39;medicine\u0026#39;) 10 Show year, subject, and name of people who won a \u0026lsquo;Medicine\u0026rsquo; prize in an early year (before 1910, not including 1910) together with winners of a \u0026lsquo;Literature\u0026rsquo; prize in a later year (after 2004, including 2004)\n1 2 3 SELECT *FROM nobel WHERE (yr \u0026lt; \u0026#39;1910\u0026#39; AND subject = \u0026#39;medicine\u0026#39;) OR (yr \u0026gt;= \u0026#39;2004\u0026#39; AND subject = \u0026#39;literature\u0026#39;) 11 Find all details of the prize won by PETER GRÜNBERG\nNon-ASCII characters\nThe u in his name has an umlaut. You may find this link useful https://en.wikipedia.org/wiki/%C3%9C#Keyboarding\n1 2 SELECT *FROM nobel WHERE winner = \u0026#39;Peter Grünberg\u0026#39; 12 Find all details of the prize won by EUGENE O\u0026rsquo;NEILL\nEscaping single quotes\nYou can\u0026rsquo;t put a single quote in a quote string directly. You can use two single quotes within a quoted string.\n1 2 SELECT *FROM nobel WHERE winner = \u0026#34;Eugene O\u0026#39;neill\u0026#34; 13 Knights in order\nList the winners, year and subject where the winner starts with Sir. Show the the most recent first, then by name order.\n1 2 3 4 SELECT winner, yr, subject FROM nobel WHERE winner LIKE \u0026#39;Sir%\u0026#39; ORDER BY yr DESC, winner 14 The expression subject IN (\u0026lsquo;chemistry\u0026rsquo;,\u0026lsquo;physics\u0026rsquo;) can be used as a value - it will be 0 or 1.The expression subject IN (\u0026lsquo;chemistry\u0026rsquo;,\u0026lsquo;physics\u0026rsquo;) can be used as a value - it will be 0 or 1.\nShow the 1984 winners and subject ordered by subject and winner name; but list chemistry and physics last.\n1 2 3 4 SELECT winner, subject FROM nobel WHERE yr = 1984 ORDER BY subject IN (\u0026#39;chemistry\u0026#39;,\u0026#39;physics\u0026#39;) ASC Practice from SQLZOO\n","date":"2024-09-02T00:00:00Z","permalink":"https://mushroom11167.github.io/my_website/p/sql-02/","title":"SELECT from Nobel Tutorial"},{"content":"1 Read the notes about this table. Observe the result of running this SQL command to show the name, continent and population of all countries.\n1 SELECT name, continent, population FROM world 2 How to use WHERE to filter records. Show the name for the countries that have a population of at least 200 million. 200 million is 200000000, there are eight zeros.\n1 2 SELECT name FROM world WHERE population \u0026gt; 200000000 3 Give the name and the per capita GDP for those countries with a population of at least 200 million.\n1 2 SELECT name, gdp/population FROM world WHERE population \u0026gt; 200000000 4 Show the name and population in millions for the countries of the continent \u0026lsquo;South America\u0026rsquo;. Divide the population by 1000000 to get population in millions.\n1 2 SELECT name, population/1000000 FROM world WHERE continent = \u0026#39;South America\u0026#39; 5 Show the name and population for France, Germany, Italy\n1 2 SELECT name, population FROM world WHERE name IN (\u0026#39;France\u0026#39;, \u0026#39;Germany\u0026#39;, \u0026#39;Italy\u0026#39;) 6 Show the countries which have a name that includes the word \u0026lsquo;United\u0026rsquo;\n1 2 SELECT name FROM world WHERE name LIKE \u0026#39;%United%\u0026#39; 7 Two ways to be big: A country is big if it has an area of more than 3 million sq km or it has a population of more than 250 million. Show the countries that are big by area or big by population. Show name, population and area.\n1 2 SELECT name, population, area FROM world WHERE area \u0026gt; 3000000 OR population \u0026gt; 250000000 8 Exclusive OR (XOR). Show the countries that are big by area (more than 3 million) or big by population (more than 250 million) but not both. Show name, population and area.\nAustralia has a big area but a small population, it should be included. Indonesia has a big population but a small area, it should be included. China has a big population and big area, it should be excluded. United Kingdom has a small population and a small area, it should be excluded. 1 2 3 SELECT name, population, area FROM world WHERE (area \u0026gt; 3000000 AND population \u0026lt; 250000000) OR (area \u0026lt; 3000000 AND population \u0026gt; 250000000) 9 Show the name and population in millions and the GDP in billions for the countries of the continent \u0026lsquo;South America\u0026rsquo;. Use the ROUND function to show the values to two decimal places.\nFor Americas show population in millions and GDP in billions both to 2 decimal places.\nMillions and billions\nDivide by 1000000 (6 zeros) for millions. Divide by 1000000000 (9 zeros) for billions.\nMissing decimals\nFor some version of SQL the division of an integer by an integer will be an integer. One way to prevent this is to divide by a floating point number such as 1000000.0.\n1 2 3 SELECT name, ROUND(population/1000000,2), ROUND(gdp/1000000000,2) FROM world WHERE continent IN (\u0026#39;America\u0026#39;,\u0026#39;South America\u0026#39;) 10 Show the name and per-capita GDP for those countries with a GDP of at least one trillion (1000000000000; that is 12 zeros). Round this value to the nearest 1000. Show per-capita GDP for the trillion dollar countries to the nearest $1000.\n1 2 SELECT name, ROUND(gdp/population,-3) FROM world WHERE gdp \u0026gt; 1000000000000 11 Greece has capital Athens.\nEach of the strings \u0026lsquo;Greece\u0026rsquo;, and \u0026lsquo;Athens\u0026rsquo; has 6 characters.\nShow the name and capital where the name and the capital have the same number of characters.\nYou can use the LENGTH function to find the number of characters in a string 1 2 3 SELECT name, capital FROM world WHERE LENGTH(name) = LENGTH(capital) 12 The capital of Sweden is Stockholm. Both words start with the letter \u0026lsquo;S\u0026rsquo;.\nShow the name and the capital where the first letters of each match. Don\u0026rsquo;t include countries where the name and the capital are the same word.\nYou can use the function LEFT to isolate the first character. You can use \u0026lt;\u0026gt; as the NOT EQUALS operator. 1 2 3 4 SELECT name, capital FROM world WHERE LEFT(name,1) = LEFT(capital,1) AND name \u0026lt;\u0026gt; capital 13 Equatorial Guinea and Dominican Republic have all of the vowels (a e i o u) in the name. They don\u0026rsquo;t count because they have more than one word in the name.\nFind the country that has all the vowels and no spaces in its name.\nYou can use the phrase name NOT LIKE '%a%' to exclude characters from your results. The query shown misses countries like Bahamas and Belarus because they contain at least one \u0026lsquo;a\u0026rsquo; 1 2 3 4 5 6 7 8 SELECT name FROM world WHERE name LIKE \u0026#39;%a%\u0026#39; AND name LIKE \u0026#39;%e%\u0026#39; AND name LIKE \u0026#39;%i%\u0026#39; AND name LIKE \u0026#39;%o%\u0026#39; AND name LIKE \u0026#39;%u%\u0026#39; AND name NOT LIKE \u0026#39;% %\u0026#39; Practice from SQLZOO\n","date":"2024-09-02T00:00:00Z","permalink":"https://mushroom11167.github.io/my_website/p/sql-03/","title":"SELECT from world"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;center\u0026gt; \u0026lt;img src= \u0026#34;https://i.pinimg.com/736x/76/a3/28/76a3286eaf092e24643d0d575c77b787.jpg\u0026#34; width= \u0026#34;50%\u0026#34;\u0026gt; \u0026lt;br\u0026gt; \u0026lt;img src= \u0026#34;https://i.pinimg.com/736x/83/07/12/8307126d6bcf979fff961e55dd0df5ba.jpg\u0026#34; width= \u0026#34;50%\u0026#34;\u0026gt; \u0026lt;br\u0026gt; \u0026lt;img src= \u0026#34;https://i.pinimg.com/736x/e7/f7/e9/e7f7e918efb38ca1fd046b5024ac9fef.jpg\u0026#34; width= \u0026#34;50%\u0026#34;\u0026gt; \u0026lt;br\u0026gt; \u0026lt;img src= \u0026#34;https://i.pinimg.com/736x/a8/e0/25/a8e0253e8db11c139415043c35481120.jpg\u0026#34; width= \u0026#34;50%\u0026#34;\u0026gt; \u0026lt;/center\u0026gt; Photo by Jia-Yi on Pinterest\n","date":"2023-08-08T00:00:00Z","image":"https://mushroom11167.github.io/my_website/p/film-03/3_hu88180571706417567.jpg","permalink":"https://mushroom11167.github.io/my_website/p/film-03/","title":"Film 03"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;center\u0026gt; \u0026lt;img src= \u0026#34;https://i.pinimg.com/736x/bb/16/38/bb1638539146af829ed32626da748a3d.jpg\u0026#34; width= \u0026#34;50%\u0026#34;\u0026gt; \u0026lt;br\u0026gt; \u0026lt;img src= \u0026#34;https://i.pinimg.com/736x/9e/eb/da/9eebda932e8b18693a355f4284571e1b.jpg\u0026#34; width= \u0026#34;50%\u0026#34;\u0026gt; \u0026lt;br\u0026gt; \u0026lt;img src= \u0026#34;https://i.pinimg.com/736x/5f/a8/3e/5fa83eb7a988f2357f33c15b42469783.jpg\u0026#34; width= \u0026#34;50%\u0026#34;\u0026gt; \u0026lt;br\u0026gt; \u0026lt;img src= \u0026#34;https://i.pinimg.com/736x/dc/0c/fd/dc0cfd47acabbc6518054ff41cc88b7a.jpg\u0026#34; width= \u0026#34;50%\u0026#34;\u0026gt; \u0026lt;/center\u0026gt; Photo by Jia-Yi on Pinterest\n","date":"2023-07-31T00:00:00Z","image":"https://mushroom11167.github.io/my_website/p/film-02/2_hu5126991661766258144.jpg","permalink":"https://mushroom11167.github.io/my_website/p/film-02/","title":"Film 02"}]